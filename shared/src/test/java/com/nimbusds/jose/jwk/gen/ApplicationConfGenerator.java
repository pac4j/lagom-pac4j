package com.nimbusds.jose.jwk.gen;

import com.nimbusds.jose.EncryptionMethod;
import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.JWEAlgorithm;
import com.nimbusds.jose.jwk.ECKey;
import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.OctetSequenceKey;
import com.nimbusds.jose.jwk.RSAKey;
import org.apache.commons.lang3.StringUtils;

import static com.nimbusds.jose.EncryptionMethod.A128GCM;
import static com.nimbusds.jose.EncryptionMethod.A256GCM;
import static com.nimbusds.jose.JWEAlgorithm.DIR;
import static com.nimbusds.jose.JWEAlgorithm.ECDH_ES_A256KW;
import static com.nimbusds.jose.JWEAlgorithm.RSA_OAEP_256;
import static com.nimbusds.jose.JWSAlgorithm.ES256;
import static com.nimbusds.jose.JWSAlgorithm.HS256;
import static com.nimbusds.jose.JWSAlgorithm.RS256;
import static com.nimbusds.jose.jwk.Curve.P_256;

/**
 * Generate {@code application.conf} for tests.
 *
 * @author Sergey Morgunov
 * @since 1.0.0
 */
public class ApplicationConfGenerator {

    private static void println(String line) {
        System.out.println(line);
    }

    private static void println(JWK jwk) {
        println("      {");
        println("        jwk = " + jwk.toJSONString());
        println("      },");
    }

    private static void println(int pad, String propName, JWK jwk) {
        String padStr = StringUtils.repeat(' ', pad);
        println(padStr + propName + " {");
        println(padStr + "  jwk = " + jwk.toJSONString());
        println(padStr + "}");
    }

    private static void println(JWEAlgorithm algorithm, EncryptionMethod method, JWK jwk) {
        println("      {");
        println("        algorithm = \"" + algorithm.getName() + "\"");
        println("        method = \"" + method.getName() + "\"");
        println("        jwk = " + jwk.toJSONString());
        println("      },");
    }

    private static void println(int pad, String propName, JWEAlgorithm algorithm, EncryptionMethod method, JWK jwk) {
        String padStr = StringUtils.repeat(' ', pad);
        println(padStr + propName + " {");
        println(padStr + "  algorithm = \"" + algorithm.getName() + "\"");
        println(padStr + "  method = \"" + method.getName() + "\"");
        println(padStr + "  jwk = " + jwk.toJSONString());
        println(padStr + "}");
    }

    public static void main(String[] args) throws JOSEException {
        ECKey ecKey = new ECKeyGenerator(P_256).keyID("ec-kid").algorithm(ES256).generate();
        OctetSequenceKey octKey = new OctetSequenceKeyGenerator(256).keyID("oct-kid").algorithm(HS256).generate();
        RSAKey rsaKey = new RSAKeyGenerator(2048).keyID("rsa-kid").algorithm(RS256).generate();
        println("# THIS FILE IS AUTO GENERATED. DO NOT EDIT THIS FILE MANUALLY.");
        println("# ~");
        println("# ~ Run 'ApplicationConfGenerator#main()' to regenerate it.");
        println("# ~");
        println("");
        println("play.modules.enabled += org.pac4j.lagom.javadsl.TestModule");
        println("");
        println("pac4j.lagom.jwt {");
        println("  authenticator {");
        println("    signatures = [");
        println(octKey);
        println(rsaKey.toPublicJWK());
        println(ecKey.toPublicJWK());
        println("    ]");
        println("    encryptions = [");
        println(DIR, A256GCM, octKey);
        println(RSA_OAEP_256, A128GCM, rsaKey);
        println(ECDH_ES_A256KW, A256GCM, ecKey);
        println("    ]");
        println("  }");
        println("");
        println("  generator {");
        println("    sign {");
        println("      oct {");
        println(8, "signature", octKey);
        println("      }");
        println("      rsa {");
        println(8, "signature", rsaKey);
        println("      }");
        println("      ec {");
        println(8, "signature", ecKey);
        println("      }");
        println("    }");
        println("    encrypt {");
        println("      oct {");
        println(8, "encryption", DIR, A256GCM, octKey);
        println("      }");
        println("      rsa {");
        println(8, "encryption", RSA_OAEP_256, A128GCM, rsaKey.toPublicJWK());
        println("      }");
        println("      ec {");
        println(8, "encryption", ECDH_ES_A256KW, A256GCM, ecKey.toPublicJWK());
        println("      }");
        println("    }");
        println("  }");
        println("}");
    }

}
